// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depthStream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_depthStream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_depthStream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_depthStream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_depthStream_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_depthStream_2eproto;
namespace depthStream {
class DepthStreamRequest;
class DepthStreamRequestDefaultTypeInternal;
extern DepthStreamRequestDefaultTypeInternal _DepthStreamRequest_default_instance_;
class DepthStreamRsP;
class DepthStreamRsPDefaultTypeInternal;
extern DepthStreamRsPDefaultTypeInternal _DepthStreamRsP_default_instance_;
class Level;
class LevelDefaultTypeInternal;
extern LevelDefaultTypeInternal _Level_default_instance_;
}  // namespace depthStream
PROTOBUF_NAMESPACE_OPEN
template<> ::depthStream::DepthStreamRequest* Arena::CreateMaybeMessage<::depthStream::DepthStreamRequest>(Arena*);
template<> ::depthStream::DepthStreamRsP* Arena::CreateMaybeMessage<::depthStream::DepthStreamRsP>(Arena*);
template<> ::depthStream::Level* Arena::CreateMaybeMessage<::depthStream::Level>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace depthStream {

// ===================================================================

class DepthStreamRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depthStream.DepthStreamRequest) */ {
 public:
  DepthStreamRequest();
  virtual ~DepthStreamRequest();

  DepthStreamRequest(const DepthStreamRequest& from);
  DepthStreamRequest(DepthStreamRequest&& from) noexcept
    : DepthStreamRequest() {
    *this = ::std::move(from);
  }

  inline DepthStreamRequest& operator=(const DepthStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthStreamRequest& operator=(DepthStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthStreamRequest* internal_default_instance() {
    return reinterpret_cast<const DepthStreamRequest*>(
               &_DepthStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DepthStreamRequest* other);
  friend void swap(DepthStreamRequest& a, DepthStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthStreamRequest* New() const final {
    return CreateMaybeMessage<DepthStreamRequest>(nullptr);
  }

  DepthStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthStreamRequest& from);
  void MergeFrom(const DepthStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depthStream.DepthStreamRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_depthStream_2eproto);
    return ::descriptor_table_depthStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeId = 1;
  void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  const std::string& exchangeid() const;
  void set_exchangeid(const std::string& value);
  void set_exchangeid(std::string&& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  std::string* mutable_exchangeid();
  std::string* release_exchangeid();
  void set_allocated_exchangeid(std::string* exchangeid);

  // string instrument = 2;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 2;
  const std::string& instrument() const;
  void set_instrument(const std::string& value);
  void set_instrument(std::string&& value);
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  std::string* mutable_instrument();
  std::string* release_instrument();
  void set_allocated_instrument(std::string* instrument);

  // string securityType = 3;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 3;
  const std::string& securitytype() const;
  void set_securitytype(const std::string& value);
  void set_securitytype(std::string&& value);
  void set_securitytype(const char* value);
  void set_securitytype(const char* value, size_t size);
  std::string* mutable_securitytype();
  std::string* release_securitytype();
  void set_allocated_securitytype(std::string* securitytype);

  // string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:depthStream.DepthStreamRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr securitytype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_depthStream_2eproto;
};
// -------------------------------------------------------------------

class DepthStreamRsP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depthStream.DepthStreamRsP) */ {
 public:
  DepthStreamRsP();
  virtual ~DepthStreamRsP();

  DepthStreamRsP(const DepthStreamRsP& from);
  DepthStreamRsP(DepthStreamRsP&& from) noexcept
    : DepthStreamRsP() {
    *this = ::std::move(from);
  }

  inline DepthStreamRsP& operator=(const DepthStreamRsP& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepthStreamRsP& operator=(DepthStreamRsP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepthStreamRsP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepthStreamRsP* internal_default_instance() {
    return reinterpret_cast<const DepthStreamRsP*>(
               &_DepthStreamRsP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DepthStreamRsP* other);
  friend void swap(DepthStreamRsP& a, DepthStreamRsP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DepthStreamRsP* New() const final {
    return CreateMaybeMessage<DepthStreamRsP>(nullptr);
  }

  DepthStreamRsP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepthStreamRsP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepthStreamRsP& from);
  void MergeFrom(const DepthStreamRsP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepthStreamRsP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depthStream.DepthStreamRsP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_depthStream_2eproto);
    return ::descriptor_table_depthStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exchangeId = 1;
  void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  const std::string& exchangeid() const;
  void set_exchangeid(const std::string& value);
  void set_exchangeid(std::string&& value);
  void set_exchangeid(const char* value);
  void set_exchangeid(const char* value, size_t size);
  std::string* mutable_exchangeid();
  std::string* release_exchangeid();
  void set_allocated_exchangeid(std::string* exchangeid);

  // string instrument = 2;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 2;
  const std::string& instrument() const;
  void set_instrument(const std::string& value);
  void set_instrument(std::string&& value);
  void set_instrument(const char* value);
  void set_instrument(const char* value, size_t size);
  std::string* mutable_instrument();
  std::string* release_instrument();
  void set_allocated_instrument(std::string* instrument);

  // string date = 13;
  void clear_date();
  static const int kDateFieldNumber = 13;
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string time = 14;
  void clear_time();
  static const int kTimeFieldNumber = 14;
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);

  // .depthStream.Level bidLevel1 = 3;
  bool has_bidlevel1() const;
  void clear_bidlevel1();
  static const int kBidLevel1FieldNumber = 3;
  const ::depthStream::Level& bidlevel1() const;
  ::depthStream::Level* release_bidlevel1();
  ::depthStream::Level* mutable_bidlevel1();
  void set_allocated_bidlevel1(::depthStream::Level* bidlevel1);

  // .depthStream.Level bidLevel2 = 4;
  bool has_bidlevel2() const;
  void clear_bidlevel2();
  static const int kBidLevel2FieldNumber = 4;
  const ::depthStream::Level& bidlevel2() const;
  ::depthStream::Level* release_bidlevel2();
  ::depthStream::Level* mutable_bidlevel2();
  void set_allocated_bidlevel2(::depthStream::Level* bidlevel2);

  // .depthStream.Level bidLevel3 = 5;
  bool has_bidlevel3() const;
  void clear_bidlevel3();
  static const int kBidLevel3FieldNumber = 5;
  const ::depthStream::Level& bidlevel3() const;
  ::depthStream::Level* release_bidlevel3();
  ::depthStream::Level* mutable_bidlevel3();
  void set_allocated_bidlevel3(::depthStream::Level* bidlevel3);

  // .depthStream.Level bidLevel4 = 6;
  bool has_bidlevel4() const;
  void clear_bidlevel4();
  static const int kBidLevel4FieldNumber = 6;
  const ::depthStream::Level& bidlevel4() const;
  ::depthStream::Level* release_bidlevel4();
  ::depthStream::Level* mutable_bidlevel4();
  void set_allocated_bidlevel4(::depthStream::Level* bidlevel4);

  // .depthStream.Level bidLevel5 = 7;
  bool has_bidlevel5() const;
  void clear_bidlevel5();
  static const int kBidLevel5FieldNumber = 7;
  const ::depthStream::Level& bidlevel5() const;
  ::depthStream::Level* release_bidlevel5();
  ::depthStream::Level* mutable_bidlevel5();
  void set_allocated_bidlevel5(::depthStream::Level* bidlevel5);

  // .depthStream.Level askLevel1 = 8;
  bool has_asklevel1() const;
  void clear_asklevel1();
  static const int kAskLevel1FieldNumber = 8;
  const ::depthStream::Level& asklevel1() const;
  ::depthStream::Level* release_asklevel1();
  ::depthStream::Level* mutable_asklevel1();
  void set_allocated_asklevel1(::depthStream::Level* asklevel1);

  // .depthStream.Level askLevel2 = 9;
  bool has_asklevel2() const;
  void clear_asklevel2();
  static const int kAskLevel2FieldNumber = 9;
  const ::depthStream::Level& asklevel2() const;
  ::depthStream::Level* release_asklevel2();
  ::depthStream::Level* mutable_asklevel2();
  void set_allocated_asklevel2(::depthStream::Level* asklevel2);

  // .depthStream.Level askLevel3 = 10;
  bool has_asklevel3() const;
  void clear_asklevel3();
  static const int kAskLevel3FieldNumber = 10;
  const ::depthStream::Level& asklevel3() const;
  ::depthStream::Level* release_asklevel3();
  ::depthStream::Level* mutable_asklevel3();
  void set_allocated_asklevel3(::depthStream::Level* asklevel3);

  // .depthStream.Level askLevel4 = 11;
  bool has_asklevel4() const;
  void clear_asklevel4();
  static const int kAskLevel4FieldNumber = 11;
  const ::depthStream::Level& asklevel4() const;
  ::depthStream::Level* release_asklevel4();
  ::depthStream::Level* mutable_asklevel4();
  void set_allocated_asklevel4(::depthStream::Level* asklevel4);

  // .depthStream.Level askLevel5 = 12;
  bool has_asklevel5() const;
  void clear_asklevel5();
  static const int kAskLevel5FieldNumber = 12;
  const ::depthStream::Level& asklevel5() const;
  ::depthStream::Level* release_asklevel5();
  ::depthStream::Level* mutable_asklevel5();
  void set_allocated_asklevel5(::depthStream::Level* asklevel5);

  // @@protoc_insertion_point(class_scope:depthStream.DepthStreamRsP)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::depthStream::Level* bidlevel1_;
  ::depthStream::Level* bidlevel2_;
  ::depthStream::Level* bidlevel3_;
  ::depthStream::Level* bidlevel4_;
  ::depthStream::Level* bidlevel5_;
  ::depthStream::Level* asklevel1_;
  ::depthStream::Level* asklevel2_;
  ::depthStream::Level* asklevel3_;
  ::depthStream::Level* asklevel4_;
  ::depthStream::Level* asklevel5_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_depthStream_2eproto;
};
// -------------------------------------------------------------------

class Level :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:depthStream.Level) */ {
 public:
  Level();
  virtual ~Level();

  Level(const Level& from);
  Level(Level&& from) noexcept
    : Level() {
    *this = ::std::move(from);
  }

  inline Level& operator=(const Level& from) {
    CopyFrom(from);
    return *this;
  }
  inline Level& operator=(Level&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Level& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Level* internal_default_instance() {
    return reinterpret_cast<const Level*>(
               &_Level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Level* other);
  friend void swap(Level& a, Level& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Level* New() const final {
    return CreateMaybeMessage<Level>(nullptr);
  }

  Level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Level>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Level& from);
  void MergeFrom(const Level& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Level* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "depthStream.Level";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_depthStream_2eproto);
    return ::descriptor_table_depthStream_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // double volume = 2;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  double volume() const;
  void set_volume(double value);

  // @@protoc_insertion_point(class_scope:depthStream.Level)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double price_;
  double volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_depthStream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DepthStreamRequest

// string exchangeId = 1;
inline void DepthStreamRequest::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRequest::exchangeid() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRequest.exchangeId)
  return exchangeid_.GetNoArena();
}
inline void DepthStreamRequest::set_exchangeid(const std::string& value) {
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRequest.exchangeId)
}
inline void DepthStreamRequest::set_exchangeid(std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRequest.exchangeId)
}
inline void DepthStreamRequest::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRequest.exchangeId)
}
inline void DepthStreamRequest::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRequest.exchangeId)
}
inline std::string* DepthStreamRequest::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRequest.exchangeId)
  return exchangeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRequest::release_exchangeid() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRequest.exchangeId)
  
  return exchangeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRequest::set_allocated_exchangeid(std::string* exchangeid) {
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRequest.exchangeId)
}

// string instrument = 2;
inline void DepthStreamRequest::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRequest::instrument() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRequest.instrument)
  return instrument_.GetNoArena();
}
inline void DepthStreamRequest::set_instrument(const std::string& value) {
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRequest.instrument)
}
inline void DepthStreamRequest::set_instrument(std::string&& value) {
  
  instrument_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRequest.instrument)
}
inline void DepthStreamRequest::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRequest.instrument)
}
inline void DepthStreamRequest::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRequest.instrument)
}
inline std::string* DepthStreamRequest::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRequest.instrument)
  return instrument_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRequest::release_instrument() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRequest.instrument)
  
  return instrument_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRequest::set_allocated_instrument(std::string* instrument) {
  if (instrument != nullptr) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRequest.instrument)
}

// string securityType = 3;
inline void DepthStreamRequest::clear_securitytype() {
  securitytype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRequest::securitytype() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRequest.securityType)
  return securitytype_.GetNoArena();
}
inline void DepthStreamRequest::set_securitytype(const std::string& value) {
  
  securitytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRequest.securityType)
}
inline void DepthStreamRequest::set_securitytype(std::string&& value) {
  
  securitytype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRequest.securityType)
}
inline void DepthStreamRequest::set_securitytype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securitytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRequest.securityType)
}
inline void DepthStreamRequest::set_securitytype(const char* value, size_t size) {
  
  securitytype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRequest.securityType)
}
inline std::string* DepthStreamRequest::mutable_securitytype() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRequest.securityType)
  return securitytype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRequest::release_securitytype() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRequest.securityType)
  
  return securitytype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRequest::set_allocated_securitytype(std::string* securitytype) {
  if (securitytype != nullptr) {
    
  } else {
    
  }
  securitytype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), securitytype);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRequest.securityType)
}

// string type = 4;
inline void DepthStreamRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRequest::type() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRequest.type)
  return type_.GetNoArena();
}
inline void DepthStreamRequest::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRequest.type)
}
inline void DepthStreamRequest::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRequest.type)
}
inline void DepthStreamRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRequest.type)
}
inline void DepthStreamRequest::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRequest.type)
}
inline std::string* DepthStreamRequest::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRequest.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRequest::release_type() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRequest.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRequest.type)
}

// -------------------------------------------------------------------

// DepthStreamRsP

// string exchangeId = 1;
inline void DepthStreamRsP::clear_exchangeid() {
  exchangeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRsP::exchangeid() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.exchangeId)
  return exchangeid_.GetNoArena();
}
inline void DepthStreamRsP::set_exchangeid(const std::string& value) {
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRsP.exchangeId)
}
inline void DepthStreamRsP::set_exchangeid(std::string&& value) {
  
  exchangeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRsP.exchangeId)
}
inline void DepthStreamRsP::set_exchangeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRsP.exchangeId)
}
inline void DepthStreamRsP::set_exchangeid(const char* value, size_t size) {
  
  exchangeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRsP.exchangeId)
}
inline std::string* DepthStreamRsP::mutable_exchangeid() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.exchangeId)
  return exchangeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRsP::release_exchangeid() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.exchangeId)
  
  return exchangeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRsP::set_allocated_exchangeid(std::string* exchangeid) {
  if (exchangeid != nullptr) {
    
  } else {
    
  }
  exchangeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangeid);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.exchangeId)
}

// string instrument = 2;
inline void DepthStreamRsP::clear_instrument() {
  instrument_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRsP::instrument() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.instrument)
  return instrument_.GetNoArena();
}
inline void DepthStreamRsP::set_instrument(const std::string& value) {
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRsP.instrument)
}
inline void DepthStreamRsP::set_instrument(std::string&& value) {
  
  instrument_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRsP.instrument)
}
inline void DepthStreamRsP::set_instrument(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRsP.instrument)
}
inline void DepthStreamRsP::set_instrument(const char* value, size_t size) {
  
  instrument_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRsP.instrument)
}
inline std::string* DepthStreamRsP::mutable_instrument() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.instrument)
  return instrument_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRsP::release_instrument() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.instrument)
  
  return instrument_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRsP::set_allocated_instrument(std::string* instrument) {
  if (instrument != nullptr) {
    
  } else {
    
  }
  instrument_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.instrument)
}

// .depthStream.Level bidLevel1 = 3;
inline bool DepthStreamRsP::has_bidlevel1() const {
  return this != internal_default_instance() && bidlevel1_ != nullptr;
}
inline void DepthStreamRsP::clear_bidlevel1() {
  if (GetArenaNoVirtual() == nullptr && bidlevel1_ != nullptr) {
    delete bidlevel1_;
  }
  bidlevel1_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::bidlevel1() const {
  const ::depthStream::Level* p = bidlevel1_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.bidLevel1)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_bidlevel1() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.bidLevel1)
  
  ::depthStream::Level* temp = bidlevel1_;
  bidlevel1_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_bidlevel1() {
  
  if (bidlevel1_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    bidlevel1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.bidLevel1)
  return bidlevel1_;
}
inline void DepthStreamRsP::set_allocated_bidlevel1(::depthStream::Level* bidlevel1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidlevel1_;
  }
  if (bidlevel1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidlevel1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidlevel1, submessage_arena);
    }
    
  } else {
    
  }
  bidlevel1_ = bidlevel1;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.bidLevel1)
}

// .depthStream.Level bidLevel2 = 4;
inline bool DepthStreamRsP::has_bidlevel2() const {
  return this != internal_default_instance() && bidlevel2_ != nullptr;
}
inline void DepthStreamRsP::clear_bidlevel2() {
  if (GetArenaNoVirtual() == nullptr && bidlevel2_ != nullptr) {
    delete bidlevel2_;
  }
  bidlevel2_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::bidlevel2() const {
  const ::depthStream::Level* p = bidlevel2_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.bidLevel2)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_bidlevel2() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.bidLevel2)
  
  ::depthStream::Level* temp = bidlevel2_;
  bidlevel2_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_bidlevel2() {
  
  if (bidlevel2_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    bidlevel2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.bidLevel2)
  return bidlevel2_;
}
inline void DepthStreamRsP::set_allocated_bidlevel2(::depthStream::Level* bidlevel2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidlevel2_;
  }
  if (bidlevel2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidlevel2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidlevel2, submessage_arena);
    }
    
  } else {
    
  }
  bidlevel2_ = bidlevel2;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.bidLevel2)
}

// .depthStream.Level bidLevel3 = 5;
inline bool DepthStreamRsP::has_bidlevel3() const {
  return this != internal_default_instance() && bidlevel3_ != nullptr;
}
inline void DepthStreamRsP::clear_bidlevel3() {
  if (GetArenaNoVirtual() == nullptr && bidlevel3_ != nullptr) {
    delete bidlevel3_;
  }
  bidlevel3_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::bidlevel3() const {
  const ::depthStream::Level* p = bidlevel3_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.bidLevel3)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_bidlevel3() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.bidLevel3)
  
  ::depthStream::Level* temp = bidlevel3_;
  bidlevel3_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_bidlevel3() {
  
  if (bidlevel3_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    bidlevel3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.bidLevel3)
  return bidlevel3_;
}
inline void DepthStreamRsP::set_allocated_bidlevel3(::depthStream::Level* bidlevel3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidlevel3_;
  }
  if (bidlevel3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidlevel3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidlevel3, submessage_arena);
    }
    
  } else {
    
  }
  bidlevel3_ = bidlevel3;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.bidLevel3)
}

// .depthStream.Level bidLevel4 = 6;
inline bool DepthStreamRsP::has_bidlevel4() const {
  return this != internal_default_instance() && bidlevel4_ != nullptr;
}
inline void DepthStreamRsP::clear_bidlevel4() {
  if (GetArenaNoVirtual() == nullptr && bidlevel4_ != nullptr) {
    delete bidlevel4_;
  }
  bidlevel4_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::bidlevel4() const {
  const ::depthStream::Level* p = bidlevel4_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.bidLevel4)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_bidlevel4() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.bidLevel4)
  
  ::depthStream::Level* temp = bidlevel4_;
  bidlevel4_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_bidlevel4() {
  
  if (bidlevel4_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    bidlevel4_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.bidLevel4)
  return bidlevel4_;
}
inline void DepthStreamRsP::set_allocated_bidlevel4(::depthStream::Level* bidlevel4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidlevel4_;
  }
  if (bidlevel4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidlevel4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidlevel4, submessage_arena);
    }
    
  } else {
    
  }
  bidlevel4_ = bidlevel4;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.bidLevel4)
}

// .depthStream.Level bidLevel5 = 7;
inline bool DepthStreamRsP::has_bidlevel5() const {
  return this != internal_default_instance() && bidlevel5_ != nullptr;
}
inline void DepthStreamRsP::clear_bidlevel5() {
  if (GetArenaNoVirtual() == nullptr && bidlevel5_ != nullptr) {
    delete bidlevel5_;
  }
  bidlevel5_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::bidlevel5() const {
  const ::depthStream::Level* p = bidlevel5_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.bidLevel5)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_bidlevel5() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.bidLevel5)
  
  ::depthStream::Level* temp = bidlevel5_;
  bidlevel5_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_bidlevel5() {
  
  if (bidlevel5_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    bidlevel5_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.bidLevel5)
  return bidlevel5_;
}
inline void DepthStreamRsP::set_allocated_bidlevel5(::depthStream::Level* bidlevel5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidlevel5_;
  }
  if (bidlevel5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidlevel5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidlevel5, submessage_arena);
    }
    
  } else {
    
  }
  bidlevel5_ = bidlevel5;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.bidLevel5)
}

// .depthStream.Level askLevel1 = 8;
inline bool DepthStreamRsP::has_asklevel1() const {
  return this != internal_default_instance() && asklevel1_ != nullptr;
}
inline void DepthStreamRsP::clear_asklevel1() {
  if (GetArenaNoVirtual() == nullptr && asklevel1_ != nullptr) {
    delete asklevel1_;
  }
  asklevel1_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::asklevel1() const {
  const ::depthStream::Level* p = asklevel1_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.askLevel1)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_asklevel1() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.askLevel1)
  
  ::depthStream::Level* temp = asklevel1_;
  asklevel1_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_asklevel1() {
  
  if (asklevel1_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    asklevel1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.askLevel1)
  return asklevel1_;
}
inline void DepthStreamRsP::set_allocated_asklevel1(::depthStream::Level* asklevel1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asklevel1_;
  }
  if (asklevel1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asklevel1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asklevel1, submessage_arena);
    }
    
  } else {
    
  }
  asklevel1_ = asklevel1;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.askLevel1)
}

// .depthStream.Level askLevel2 = 9;
inline bool DepthStreamRsP::has_asklevel2() const {
  return this != internal_default_instance() && asklevel2_ != nullptr;
}
inline void DepthStreamRsP::clear_asklevel2() {
  if (GetArenaNoVirtual() == nullptr && asklevel2_ != nullptr) {
    delete asklevel2_;
  }
  asklevel2_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::asklevel2() const {
  const ::depthStream::Level* p = asklevel2_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.askLevel2)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_asklevel2() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.askLevel2)
  
  ::depthStream::Level* temp = asklevel2_;
  asklevel2_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_asklevel2() {
  
  if (asklevel2_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    asklevel2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.askLevel2)
  return asklevel2_;
}
inline void DepthStreamRsP::set_allocated_asklevel2(::depthStream::Level* asklevel2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asklevel2_;
  }
  if (asklevel2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asklevel2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asklevel2, submessage_arena);
    }
    
  } else {
    
  }
  asklevel2_ = asklevel2;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.askLevel2)
}

// .depthStream.Level askLevel3 = 10;
inline bool DepthStreamRsP::has_asklevel3() const {
  return this != internal_default_instance() && asklevel3_ != nullptr;
}
inline void DepthStreamRsP::clear_asklevel3() {
  if (GetArenaNoVirtual() == nullptr && asklevel3_ != nullptr) {
    delete asklevel3_;
  }
  asklevel3_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::asklevel3() const {
  const ::depthStream::Level* p = asklevel3_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.askLevel3)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_asklevel3() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.askLevel3)
  
  ::depthStream::Level* temp = asklevel3_;
  asklevel3_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_asklevel3() {
  
  if (asklevel3_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    asklevel3_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.askLevel3)
  return asklevel3_;
}
inline void DepthStreamRsP::set_allocated_asklevel3(::depthStream::Level* asklevel3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asklevel3_;
  }
  if (asklevel3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asklevel3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asklevel3, submessage_arena);
    }
    
  } else {
    
  }
  asklevel3_ = asklevel3;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.askLevel3)
}

// .depthStream.Level askLevel4 = 11;
inline bool DepthStreamRsP::has_asklevel4() const {
  return this != internal_default_instance() && asklevel4_ != nullptr;
}
inline void DepthStreamRsP::clear_asklevel4() {
  if (GetArenaNoVirtual() == nullptr && asklevel4_ != nullptr) {
    delete asklevel4_;
  }
  asklevel4_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::asklevel4() const {
  const ::depthStream::Level* p = asklevel4_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.askLevel4)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_asklevel4() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.askLevel4)
  
  ::depthStream::Level* temp = asklevel4_;
  asklevel4_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_asklevel4() {
  
  if (asklevel4_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    asklevel4_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.askLevel4)
  return asklevel4_;
}
inline void DepthStreamRsP::set_allocated_asklevel4(::depthStream::Level* asklevel4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asklevel4_;
  }
  if (asklevel4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asklevel4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asklevel4, submessage_arena);
    }
    
  } else {
    
  }
  asklevel4_ = asklevel4;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.askLevel4)
}

// .depthStream.Level askLevel5 = 12;
inline bool DepthStreamRsP::has_asklevel5() const {
  return this != internal_default_instance() && asklevel5_ != nullptr;
}
inline void DepthStreamRsP::clear_asklevel5() {
  if (GetArenaNoVirtual() == nullptr && asklevel5_ != nullptr) {
    delete asklevel5_;
  }
  asklevel5_ = nullptr;
}
inline const ::depthStream::Level& DepthStreamRsP::asklevel5() const {
  const ::depthStream::Level* p = asklevel5_;
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.askLevel5)
  return p != nullptr ? *p : *reinterpret_cast<const ::depthStream::Level*>(
      &::depthStream::_Level_default_instance_);
}
inline ::depthStream::Level* DepthStreamRsP::release_asklevel5() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.askLevel5)
  
  ::depthStream::Level* temp = asklevel5_;
  asklevel5_ = nullptr;
  return temp;
}
inline ::depthStream::Level* DepthStreamRsP::mutable_asklevel5() {
  
  if (asklevel5_ == nullptr) {
    auto* p = CreateMaybeMessage<::depthStream::Level>(GetArenaNoVirtual());
    asklevel5_ = p;
  }
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.askLevel5)
  return asklevel5_;
}
inline void DepthStreamRsP::set_allocated_asklevel5(::depthStream::Level* asklevel5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asklevel5_;
  }
  if (asklevel5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asklevel5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asklevel5, submessage_arena);
    }
    
  } else {
    
  }
  asklevel5_ = asklevel5;
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.askLevel5)
}

// string date = 13;
inline void DepthStreamRsP::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRsP::date() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.date)
  return date_.GetNoArena();
}
inline void DepthStreamRsP::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRsP.date)
}
inline void DepthStreamRsP::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRsP.date)
}
inline void DepthStreamRsP::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRsP.date)
}
inline void DepthStreamRsP::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRsP.date)
}
inline std::string* DepthStreamRsP::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRsP::release_date() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRsP::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.date)
}

// string time = 14;
inline void DepthStreamRsP::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepthStreamRsP::time() const {
  // @@protoc_insertion_point(field_get:depthStream.DepthStreamRsP.time)
  return time_.GetNoArena();
}
inline void DepthStreamRsP::set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthStream.DepthStreamRsP.time)
}
inline void DepthStreamRsP::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthStream.DepthStreamRsP.time)
}
inline void DepthStreamRsP::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthStream.DepthStreamRsP.time)
}
inline void DepthStreamRsP::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthStream.DepthStreamRsP.time)
}
inline std::string* DepthStreamRsP::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:depthStream.DepthStreamRsP.time)
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepthStreamRsP::release_time() {
  // @@protoc_insertion_point(field_release:depthStream.DepthStreamRsP.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepthStreamRsP::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:depthStream.DepthStreamRsP.time)
}

// -------------------------------------------------------------------

// Level

// double price = 1;
inline void Level::clear_price() {
  price_ = 0;
}
inline double Level::price() const {
  // @@protoc_insertion_point(field_get:depthStream.Level.price)
  return price_;
}
inline void Level::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:depthStream.Level.price)
}

// double volume = 2;
inline void Level::clear_volume() {
  volume_ = 0;
}
inline double Level::volume() const {
  // @@protoc_insertion_point(field_get:depthStream.Level.volume)
  return volume_;
}
inline void Level::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:depthStream.Level.volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace depthStream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_depthStream_2eproto
