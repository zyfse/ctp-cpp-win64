// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depthStream.proto

#include "depthStream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_depthStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Level_depthStream_2eproto;
namespace depthStream {
class DepthStreamRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthStreamRequest> _instance;
} _DepthStreamRequest_default_instance_;
class DepthStreamRsPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthStreamRsP> _instance;
} _DepthStreamRsP_default_instance_;
class LevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Level> _instance;
} _Level_default_instance_;
}  // namespace depthStream
static void InitDefaultsscc_info_DepthStreamRequest_depthStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::depthStream::_DepthStreamRequest_default_instance_;
    new (ptr) ::depthStream::DepthStreamRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::depthStream::DepthStreamRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthStreamRequest_depthStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DepthStreamRequest_depthStream_2eproto}, {}};

static void InitDefaultsscc_info_DepthStreamRsP_depthStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::depthStream::_DepthStreamRsP_default_instance_;
    new (ptr) ::depthStream::DepthStreamRsP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::depthStream::DepthStreamRsP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepthStreamRsP_depthStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DepthStreamRsP_depthStream_2eproto}, {
      &scc_info_Level_depthStream_2eproto.base,}};

static void InitDefaultsscc_info_Level_depthStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::depthStream::_Level_default_instance_;
    new (ptr) ::depthStream::Level();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::depthStream::Level::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Level_depthStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Level_depthStream_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_depthStream_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_depthStream_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_depthStream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_depthStream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRequest, exchangeid_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRequest, instrument_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRequest, securitytype_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, exchangeid_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, instrument_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, bidlevel1_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, bidlevel2_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, bidlevel3_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, bidlevel4_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, bidlevel5_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, asklevel1_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, asklevel2_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, asklevel3_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, asklevel4_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, asklevel5_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, date_),
  PROTOBUF_FIELD_OFFSET(::depthStream::DepthStreamRsP, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::depthStream::Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::depthStream::Level, price_),
  PROTOBUF_FIELD_OFFSET(::depthStream::Level, volume_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::depthStream::DepthStreamRequest)},
  { 9, -1, sizeof(::depthStream::DepthStreamRsP)},
  { 28, -1, sizeof(::depthStream::Level)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::depthStream::_DepthStreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::depthStream::_DepthStreamRsP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::depthStream::_Level_default_instance_),
};

const char descriptor_table_protodef_depthStream_2eproto[] =
  "\n\021depthStream.proto\022\013depthStream\"`\n\022Dept"
  "hStreamRequest\022\022\n\nexchangeId\030\001 \001(\t\022\022\n\nin"
  "strument\030\002 \001(\t\022\024\n\014securityType\030\003 \001(\t\022\014\n\004"
  "type\030\004 \001(\t\"\332\003\n\016DepthStreamRsP\022\022\n\nexchang"
  "eId\030\001 \001(\t\022\022\n\ninstrument\030\002 \001(\t\022%\n\tbidLeve"
  "l1\030\003 \001(\0132\022.depthStream.Level\022%\n\tbidLevel"
  "2\030\004 \001(\0132\022.depthStream.Level\022%\n\tbidLevel3"
  "\030\005 \001(\0132\022.depthStream.Level\022%\n\tbidLevel4\030"
  "\006 \001(\0132\022.depthStream.Level\022%\n\tbidLevel5\030\007"
  " \001(\0132\022.depthStream.Level\022%\n\taskLevel1\030\010 "
  "\001(\0132\022.depthStream.Level\022%\n\taskLevel2\030\t \001"
  "(\0132\022.depthStream.Level\022%\n\taskLevel3\030\n \001("
  "\0132\022.depthStream.Level\022%\n\taskLevel4\030\013 \001(\013"
  "2\022.depthStream.Level\022%\n\taskLevel5\030\014 \001(\0132"
  "\022.depthStream.Level\022\014\n\004date\030\r \001(\t\022\014\n\004tim"
  "e\030\016 \001(\t\"&\n\005Level\022\r\n\005price\030\001 \001(\001\022\016\n\006volum"
  "e\030\002 \001(\0012j\n\022DepthStreamService\022T\n\016DepthSt"
  "reamReq\022\037.depthStream.DepthStreamRequest"
  "\032\033.depthStream.DepthStreamRsP\"\000(\0010\001B0\n\024c"
  "om.zdd.adapter.shfeB\020DepthStreamProtoP\001\242"
  "\002\003HLWb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_depthStream_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_depthStream_2eproto_sccs[3] = {
  &scc_info_DepthStreamRequest_depthStream_2eproto.base,
  &scc_info_DepthStreamRsP_depthStream_2eproto.base,
  &scc_info_Level_depthStream_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_depthStream_2eproto_once;
static bool descriptor_table_depthStream_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_depthStream_2eproto = {
  &descriptor_table_depthStream_2eproto_initialized, descriptor_table_protodef_depthStream_2eproto, "depthStream.proto", 813,
  &descriptor_table_depthStream_2eproto_once, descriptor_table_depthStream_2eproto_sccs, descriptor_table_depthStream_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_depthStream_2eproto::offsets,
  file_level_metadata_depthStream_2eproto, 3, file_level_enum_descriptors_depthStream_2eproto, file_level_service_descriptors_depthStream_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_depthStream_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_depthStream_2eproto), true);
namespace depthStream {

// ===================================================================

void DepthStreamRequest::InitAsDefaultInstance() {
}
class DepthStreamRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthStreamRequest::kExchangeIdFieldNumber;
const int DepthStreamRequest::kInstrumentFieldNumber;
const int DepthStreamRequest::kSecurityTypeFieldNumber;
const int DepthStreamRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthStreamRequest::DepthStreamRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:depthStream.DepthStreamRequest)
}
DepthStreamRequest::DepthStreamRequest(const DepthStreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  securitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.securitytype().size() > 0) {
    securitytype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securitytype_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:depthStream.DepthStreamRequest)
}

void DepthStreamRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthStreamRequest_depthStream_2eproto.base);
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepthStreamRequest::~DepthStreamRequest() {
  // @@protoc_insertion_point(destructor:depthStream.DepthStreamRequest)
  SharedDtor();
}

void DepthStreamRequest::SharedDtor() {
  exchangeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepthStreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthStreamRequest& DepthStreamRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthStreamRequest_depthStream_2eproto.base);
  return *internal_default_instance();
}


void DepthStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:depthStream.DepthStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchangeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  securitytype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepthStreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exchangeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchangeid(), ptr, ctx, "depthStream.DepthStreamRequest.exchangeId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_instrument(), ptr, ctx, "depthStream.DepthStreamRequest.instrument");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string securityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_securitytype(), ptr, ctx, "depthStream.DepthStreamRequest.securityType");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "depthStream.DepthStreamRequest.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepthStreamRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:depthStream.DepthStreamRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exchangeId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRequest.exchangeId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRequest.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string securityType = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytype()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->securitytype().data(), static_cast<int>(this->securitytype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRequest.securityType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRequest.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:depthStream.DepthStreamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:depthStream.DepthStreamRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepthStreamRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:depthStream.DepthStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.exchangeId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.instrument");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrument(), output);
  }

  // string securityType = 3;
  if (this->securitytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securitytype().data(), static_cast<int>(this->securitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.securityType");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->securitytype(), output);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:depthStream.DepthStreamRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthStreamRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:depthStream.DepthStreamRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.exchangeId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.instrument");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument(), target);
  }

  // string securityType = 3;
  if (this->securitytype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->securitytype().data(), static_cast<int>(this->securitytype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.securityType");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->securitytype(), target);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRequest.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:depthStream.DepthStreamRequest)
  return target;
}

size_t DepthStreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:depthStream.DepthStreamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // string securityType = 3;
  if (this->securitytype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->securitytype());
  }

  // string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthStreamRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:depthStream.DepthStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthStreamRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthStreamRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:depthStream.DepthStreamRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:depthStream.DepthStreamRequest)
    MergeFrom(*source);
  }
}

void DepthStreamRequest::MergeFrom(const DepthStreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:depthStream.DepthStreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.securitytype().size() > 0) {

    securitytype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.securitytype_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void DepthStreamRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:depthStream.DepthStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthStreamRequest::CopyFrom(const DepthStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:depthStream.DepthStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthStreamRequest::IsInitialized() const {
  return true;
}

void DepthStreamRequest::Swap(DepthStreamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthStreamRequest::InternalSwap(DepthStreamRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exchangeid_.Swap(&other->exchangeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_.Swap(&other->instrument_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  securitytype_.Swap(&other->securitytype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthStreamRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthStreamRsP::InitAsDefaultInstance() {
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->bidlevel1_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->bidlevel2_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->bidlevel3_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->bidlevel4_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->bidlevel5_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->asklevel1_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->asklevel2_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->asklevel3_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->asklevel4_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
  ::depthStream::_DepthStreamRsP_default_instance_._instance.get_mutable()->asklevel5_ = const_cast< ::depthStream::Level*>(
      ::depthStream::Level::internal_default_instance());
}
class DepthStreamRsP::HasBitSetters {
 public:
  static const ::depthStream::Level& bidlevel1(const DepthStreamRsP* msg);
  static const ::depthStream::Level& bidlevel2(const DepthStreamRsP* msg);
  static const ::depthStream::Level& bidlevel3(const DepthStreamRsP* msg);
  static const ::depthStream::Level& bidlevel4(const DepthStreamRsP* msg);
  static const ::depthStream::Level& bidlevel5(const DepthStreamRsP* msg);
  static const ::depthStream::Level& asklevel1(const DepthStreamRsP* msg);
  static const ::depthStream::Level& asklevel2(const DepthStreamRsP* msg);
  static const ::depthStream::Level& asklevel3(const DepthStreamRsP* msg);
  static const ::depthStream::Level& asklevel4(const DepthStreamRsP* msg);
  static const ::depthStream::Level& asklevel5(const DepthStreamRsP* msg);
};

const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::bidlevel1(const DepthStreamRsP* msg) {
  return *msg->bidlevel1_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::bidlevel2(const DepthStreamRsP* msg) {
  return *msg->bidlevel2_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::bidlevel3(const DepthStreamRsP* msg) {
  return *msg->bidlevel3_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::bidlevel4(const DepthStreamRsP* msg) {
  return *msg->bidlevel4_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::bidlevel5(const DepthStreamRsP* msg) {
  return *msg->bidlevel5_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::asklevel1(const DepthStreamRsP* msg) {
  return *msg->asklevel1_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::asklevel2(const DepthStreamRsP* msg) {
  return *msg->asklevel2_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::asklevel3(const DepthStreamRsP* msg) {
  return *msg->asklevel3_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::asklevel4(const DepthStreamRsP* msg) {
  return *msg->asklevel4_;
}
const ::depthStream::Level&
DepthStreamRsP::HasBitSetters::asklevel5(const DepthStreamRsP* msg) {
  return *msg->asklevel5_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DepthStreamRsP::kExchangeIdFieldNumber;
const int DepthStreamRsP::kInstrumentFieldNumber;
const int DepthStreamRsP::kBidLevel1FieldNumber;
const int DepthStreamRsP::kBidLevel2FieldNumber;
const int DepthStreamRsP::kBidLevel3FieldNumber;
const int DepthStreamRsP::kBidLevel4FieldNumber;
const int DepthStreamRsP::kBidLevel5FieldNumber;
const int DepthStreamRsP::kAskLevel1FieldNumber;
const int DepthStreamRsP::kAskLevel2FieldNumber;
const int DepthStreamRsP::kAskLevel3FieldNumber;
const int DepthStreamRsP::kAskLevel4FieldNumber;
const int DepthStreamRsP::kAskLevel5FieldNumber;
const int DepthStreamRsP::kDateFieldNumber;
const int DepthStreamRsP::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DepthStreamRsP::DepthStreamRsP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:depthStream.DepthStreamRsP)
}
DepthStreamRsP::DepthStreamRsP(const DepthStreamRsP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exchangeid().size() > 0) {
    exchangeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.instrument().size() > 0) {
    instrument_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_bidlevel1()) {
    bidlevel1_ = new ::depthStream::Level(*from.bidlevel1_);
  } else {
    bidlevel1_ = nullptr;
  }
  if (from.has_bidlevel2()) {
    bidlevel2_ = new ::depthStream::Level(*from.bidlevel2_);
  } else {
    bidlevel2_ = nullptr;
  }
  if (from.has_bidlevel3()) {
    bidlevel3_ = new ::depthStream::Level(*from.bidlevel3_);
  } else {
    bidlevel3_ = nullptr;
  }
  if (from.has_bidlevel4()) {
    bidlevel4_ = new ::depthStream::Level(*from.bidlevel4_);
  } else {
    bidlevel4_ = nullptr;
  }
  if (from.has_bidlevel5()) {
    bidlevel5_ = new ::depthStream::Level(*from.bidlevel5_);
  } else {
    bidlevel5_ = nullptr;
  }
  if (from.has_asklevel1()) {
    asklevel1_ = new ::depthStream::Level(*from.asklevel1_);
  } else {
    asklevel1_ = nullptr;
  }
  if (from.has_asklevel2()) {
    asklevel2_ = new ::depthStream::Level(*from.asklevel2_);
  } else {
    asklevel2_ = nullptr;
  }
  if (from.has_asklevel3()) {
    asklevel3_ = new ::depthStream::Level(*from.asklevel3_);
  } else {
    asklevel3_ = nullptr;
  }
  if (from.has_asklevel4()) {
    asklevel4_ = new ::depthStream::Level(*from.asklevel4_);
  } else {
    asklevel4_ = nullptr;
  }
  if (from.has_asklevel5()) {
    asklevel5_ = new ::depthStream::Level(*from.asklevel5_);
  } else {
    asklevel5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:depthStream.DepthStreamRsP)
}

void DepthStreamRsP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepthStreamRsP_depthStream_2eproto.base);
  exchangeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bidlevel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asklevel5_) -
      reinterpret_cast<char*>(&bidlevel1_)) + sizeof(asklevel5_));
}

DepthStreamRsP::~DepthStreamRsP() {
  // @@protoc_insertion_point(destructor:depthStream.DepthStreamRsP)
  SharedDtor();
}

void DepthStreamRsP::SharedDtor() {
  exchangeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bidlevel1_;
  if (this != internal_default_instance()) delete bidlevel2_;
  if (this != internal_default_instance()) delete bidlevel3_;
  if (this != internal_default_instance()) delete bidlevel4_;
  if (this != internal_default_instance()) delete bidlevel5_;
  if (this != internal_default_instance()) delete asklevel1_;
  if (this != internal_default_instance()) delete asklevel2_;
  if (this != internal_default_instance()) delete asklevel3_;
  if (this != internal_default_instance()) delete asklevel4_;
  if (this != internal_default_instance()) delete asklevel5_;
}

void DepthStreamRsP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthStreamRsP& DepthStreamRsP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthStreamRsP_depthStream_2eproto.base);
  return *internal_default_instance();
}


void DepthStreamRsP::Clear() {
// @@protoc_insertion_point(message_clear_start:depthStream.DepthStreamRsP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchangeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bidlevel1_ != nullptr) {
    delete bidlevel1_;
  }
  bidlevel1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidlevel2_ != nullptr) {
    delete bidlevel2_;
  }
  bidlevel2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidlevel3_ != nullptr) {
    delete bidlevel3_;
  }
  bidlevel3_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidlevel4_ != nullptr) {
    delete bidlevel4_;
  }
  bidlevel4_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bidlevel5_ != nullptr) {
    delete bidlevel5_;
  }
  bidlevel5_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asklevel1_ != nullptr) {
    delete asklevel1_;
  }
  asklevel1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asklevel2_ != nullptr) {
    delete asklevel2_;
  }
  asklevel2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asklevel3_ != nullptr) {
    delete asklevel3_;
  }
  asklevel3_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asklevel4_ != nullptr) {
    delete asklevel4_;
  }
  asklevel4_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && asklevel5_ != nullptr) {
    delete asklevel5_;
  }
  asklevel5_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DepthStreamRsP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string exchangeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exchangeid(), ptr, ctx, "depthStream.DepthStreamRsP.exchangeId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_instrument(), ptr, ctx, "depthStream.DepthStreamRsP.instrument");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level bidLevel1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bidlevel1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level bidLevel2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bidlevel2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level bidLevel3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_bidlevel3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level bidLevel4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bidlevel4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level bidLevel5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_bidlevel5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level askLevel1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_asklevel1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level askLevel2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_asklevel2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level askLevel3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_asklevel3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level askLevel4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_asklevel4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .depthStream.Level askLevel5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_asklevel5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_date(), ptr, ctx, "depthStream.DepthStreamRsP.date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_time(), ptr, ctx, "depthStream.DepthStreamRsP.time");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DepthStreamRsP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:depthStream.DepthStreamRsP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exchangeId = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRsP.exchangeId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instrument = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->instrument().data(), static_cast<int>(this->instrument().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRsP.instrument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level bidLevel1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bidlevel1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level bidLevel2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bidlevel2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level bidLevel3 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bidlevel3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level bidLevel4 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bidlevel4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level bidLevel5 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bidlevel5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level askLevel1 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_asklevel1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level askLevel2 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_asklevel2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level askLevel3 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_asklevel3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level askLevel4 = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_asklevel4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .depthStream.Level askLevel5 = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_asklevel5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRsP.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string time = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "depthStream.DepthStreamRsP.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:depthStream.DepthStreamRsP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:depthStream.DepthStreamRsP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DepthStreamRsP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:depthStream.DepthStreamRsP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.exchangeId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exchangeid(), output);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.instrument");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrument(), output);
  }

  // .depthStream.Level bidLevel1 = 3;
  if (this->has_bidlevel1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::bidlevel1(this), output);
  }

  // .depthStream.Level bidLevel2 = 4;
  if (this->has_bidlevel2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::bidlevel2(this), output);
  }

  // .depthStream.Level bidLevel3 = 5;
  if (this->has_bidlevel3()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::bidlevel3(this), output);
  }

  // .depthStream.Level bidLevel4 = 6;
  if (this->has_bidlevel4()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::bidlevel4(this), output);
  }

  // .depthStream.Level bidLevel5 = 7;
  if (this->has_bidlevel5()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::bidlevel5(this), output);
  }

  // .depthStream.Level askLevel1 = 8;
  if (this->has_asklevel1()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::asklevel1(this), output);
  }

  // .depthStream.Level askLevel2 = 9;
  if (this->has_asklevel2()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::asklevel2(this), output);
  }

  // .depthStream.Level askLevel3 = 10;
  if (this->has_asklevel3()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::asklevel3(this), output);
  }

  // .depthStream.Level askLevel4 = 11;
  if (this->has_asklevel4()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::asklevel4(this), output);
  }

  // .depthStream.Level askLevel5 = 12;
  if (this->has_asklevel5()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::asklevel5(this), output);
  }

  // string date = 13;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->date(), output);
  }

  // string time = 14;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.time");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:depthStream.DepthStreamRsP)
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthStreamRsP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:depthStream.DepthStreamRsP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exchangeid().data(), static_cast<int>(this->exchangeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.exchangeId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->exchangeid(), target);
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->instrument().data(), static_cast<int>(this->instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.instrument");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument(), target);
  }

  // .depthStream.Level bidLevel1 = 3;
  if (this->has_bidlevel1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::bidlevel1(this), target);
  }

  // .depthStream.Level bidLevel2 = 4;
  if (this->has_bidlevel2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::bidlevel2(this), target);
  }

  // .depthStream.Level bidLevel3 = 5;
  if (this->has_bidlevel3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::bidlevel3(this), target);
  }

  // .depthStream.Level bidLevel4 = 6;
  if (this->has_bidlevel4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::bidlevel4(this), target);
  }

  // .depthStream.Level bidLevel5 = 7;
  if (this->has_bidlevel5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::bidlevel5(this), target);
  }

  // .depthStream.Level askLevel1 = 8;
  if (this->has_asklevel1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::asklevel1(this), target);
  }

  // .depthStream.Level askLevel2 = 9;
  if (this->has_asklevel2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::asklevel2(this), target);
  }

  // .depthStream.Level askLevel3 = 10;
  if (this->has_asklevel3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::asklevel3(this), target);
  }

  // .depthStream.Level askLevel4 = 11;
  if (this->has_asklevel4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::asklevel4(this), target);
  }

  // .depthStream.Level askLevel5 = 12;
  if (this->has_asklevel5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::asklevel5(this), target);
  }

  // string date = 13;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->date(), target);
  }

  // string time = 14;
  if (this->time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "depthStream.DepthStreamRsP.time");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:depthStream.DepthStreamRsP)
  return target;
}

size_t DepthStreamRsP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:depthStream.DepthStreamRsP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchangeId = 1;
  if (this->exchangeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exchangeid());
  }

  // string instrument = 2;
  if (this->instrument().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->instrument());
  }

  // string date = 13;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string time = 14;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->time());
  }

  // .depthStream.Level bidLevel1 = 3;
  if (this->has_bidlevel1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidlevel1_);
  }

  // .depthStream.Level bidLevel2 = 4;
  if (this->has_bidlevel2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidlevel2_);
  }

  // .depthStream.Level bidLevel3 = 5;
  if (this->has_bidlevel3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidlevel3_);
  }

  // .depthStream.Level bidLevel4 = 6;
  if (this->has_bidlevel4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidlevel4_);
  }

  // .depthStream.Level bidLevel5 = 7;
  if (this->has_bidlevel5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bidlevel5_);
  }

  // .depthStream.Level askLevel1 = 8;
  if (this->has_asklevel1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asklevel1_);
  }

  // .depthStream.Level askLevel2 = 9;
  if (this->has_asklevel2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asklevel2_);
  }

  // .depthStream.Level askLevel3 = 10;
  if (this->has_asklevel3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asklevel3_);
  }

  // .depthStream.Level askLevel4 = 11;
  if (this->has_asklevel4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asklevel4_);
  }

  // .depthStream.Level askLevel5 = 12;
  if (this->has_asklevel5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asklevel5_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthStreamRsP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:depthStream.DepthStreamRsP)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthStreamRsP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthStreamRsP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:depthStream.DepthStreamRsP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:depthStream.DepthStreamRsP)
    MergeFrom(*source);
  }
}

void DepthStreamRsP::MergeFrom(const DepthStreamRsP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:depthStream.DepthStreamRsP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exchangeid().size() > 0) {

    exchangeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exchangeid_);
  }
  if (from.instrument().size() > 0) {

    instrument_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instrument_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_bidlevel1()) {
    mutable_bidlevel1()->::depthStream::Level::MergeFrom(from.bidlevel1());
  }
  if (from.has_bidlevel2()) {
    mutable_bidlevel2()->::depthStream::Level::MergeFrom(from.bidlevel2());
  }
  if (from.has_bidlevel3()) {
    mutable_bidlevel3()->::depthStream::Level::MergeFrom(from.bidlevel3());
  }
  if (from.has_bidlevel4()) {
    mutable_bidlevel4()->::depthStream::Level::MergeFrom(from.bidlevel4());
  }
  if (from.has_bidlevel5()) {
    mutable_bidlevel5()->::depthStream::Level::MergeFrom(from.bidlevel5());
  }
  if (from.has_asklevel1()) {
    mutable_asklevel1()->::depthStream::Level::MergeFrom(from.asklevel1());
  }
  if (from.has_asklevel2()) {
    mutable_asklevel2()->::depthStream::Level::MergeFrom(from.asklevel2());
  }
  if (from.has_asklevel3()) {
    mutable_asklevel3()->::depthStream::Level::MergeFrom(from.asklevel3());
  }
  if (from.has_asklevel4()) {
    mutable_asklevel4()->::depthStream::Level::MergeFrom(from.asklevel4());
  }
  if (from.has_asklevel5()) {
    mutable_asklevel5()->::depthStream::Level::MergeFrom(from.asklevel5());
  }
}

void DepthStreamRsP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:depthStream.DepthStreamRsP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthStreamRsP::CopyFrom(const DepthStreamRsP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:depthStream.DepthStreamRsP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthStreamRsP::IsInitialized() const {
  return true;
}

void DepthStreamRsP::Swap(DepthStreamRsP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DepthStreamRsP::InternalSwap(DepthStreamRsP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exchangeid_.Swap(&other->exchangeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  instrument_.Swap(&other->instrument_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bidlevel1_, other->bidlevel1_);
  swap(bidlevel2_, other->bidlevel2_);
  swap(bidlevel3_, other->bidlevel3_);
  swap(bidlevel4_, other->bidlevel4_);
  swap(bidlevel5_, other->bidlevel5_);
  swap(asklevel1_, other->asklevel1_);
  swap(asklevel2_, other->asklevel2_);
  swap(asklevel3_, other->asklevel3_);
  swap(asklevel4_, other->asklevel4_);
  swap(asklevel5_, other->asklevel5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthStreamRsP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Level::InitAsDefaultInstance() {
}
class Level::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Level::kPriceFieldNumber;
const int Level::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Level::Level()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:depthStream.Level)
}
Level::Level(const Level& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:depthStream.Level)
}

void Level::SharedCtor() {
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:depthStream.Level)
  SharedDtor();
}

void Level::SharedDtor() {
}

void Level::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Level& Level::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Level_depthStream_2eproto.base);
  return *internal_default_instance();
}


void Level::Clear() {
// @@protoc_insertion_point(message_clear_start:depthStream.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Level::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Level::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:depthStream.Level)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double price = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:depthStream.Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:depthStream.Level)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Level::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:depthStream.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // double volume = 2;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:depthStream.Level)
}

::PROTOBUF_NAMESPACE_ID::uint8* Level::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:depthStream.Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // double volume = 2;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:depthStream.Level)
  return target;
}

size_t Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:depthStream.Level)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double price = 1;
  if (!(this->price() <= 0 && this->price() >= 0)) {
    total_size += 1 + 8;
  }

  // double volume = 2;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Level::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:depthStream.Level)
  GOOGLE_DCHECK_NE(&from, this);
  const Level* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Level>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:depthStream.Level)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:depthStream.Level)
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:depthStream.Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.price() <= 0 && from.price() >= 0)) {
    set_price(from.price());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    set_volume(from.volume());
  }
}

void Level::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:depthStream.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:depthStream.Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  return true;
}

void Level::Swap(Level* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Level::InternalSwap(Level* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(price_, other->price_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Level::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace depthStream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::depthStream::DepthStreamRequest* Arena::CreateMaybeMessage< ::depthStream::DepthStreamRequest >(Arena* arena) {
  return Arena::CreateInternal< ::depthStream::DepthStreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::depthStream::DepthStreamRsP* Arena::CreateMaybeMessage< ::depthStream::DepthStreamRsP >(Arena* arena) {
  return Arena::CreateInternal< ::depthStream::DepthStreamRsP >(arena);
}
template<> PROTOBUF_NOINLINE ::depthStream::Level* Arena::CreateMaybeMessage< ::depthStream::Level >(Arena* arena) {
  return Arena::CreateInternal< ::depthStream::Level >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
